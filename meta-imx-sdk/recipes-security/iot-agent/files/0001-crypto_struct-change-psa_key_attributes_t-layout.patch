From cb62d552726d30662697aa65fe488125a8f50c38 Mon Sep 17 00:00:00 2001
From: Ilie Halip <ilie.halip@nxp.com>
Date: Tue, 30 May 2023 14:01:15 +0300
Subject: [PATCH] crypto_struct: change psa_key_attributes_t layout

mbedtls can allocate a psa_key_attributes_t structure then call PSA APIs which
are implemented by another library. Change the structure layout so that in this
case both libraries have the same definition.

Upstream-Status: Inappropriate [i.MX specific]

Signed-off-by: Ilie Halip <ilie.halip@nxp.com>
---
 include/psa/crypto_struct.h | 26 ++++++++------------------
 1 file changed, 8 insertions(+), 18 deletions(-)

diff --git a/include/psa/crypto_struct.h b/include/psa/crypto_struct.h
index 3913551aa..dc7385e5a 100644
--- a/include/psa/crypto_struct.h
+++ b/include/psa/crypto_struct.h
@@ -255,7 +255,7 @@ static inline struct psa_key_policy_s psa_key_policy_init(void)
 
 /* The type used internally for key sizes.
  * Public interfaces use size_t, but internally we use a smaller type. */
-typedef uint16_t psa_key_bits_t;
+typedef size_t psa_key_bits_t;
 /* The maximum value of the type used to represent bit-sizes.
  * This is used to mark an invalid key size. */
 #define PSA_KEY_BITS_TOO_LARGE          ((psa_key_bits_t) -1)
@@ -267,26 +267,15 @@ typedef uint16_t psa_key_bits_t;
 #define PSA_MAX_KEY_BITS 0xfff8
 
 struct psa_key_attributes_s {
+    mbedtls_svc_key_id_t MBEDTLS_PRIVATE(id);
+    psa_key_lifetime_t MBEDTLS_PRIVATE(lifetime);
 #if defined(MBEDTLS_PSA_CRYPTO_SE_C)
     psa_key_slot_number_t MBEDTLS_PRIVATE(slot_number);
     int MBEDTLS_PRIVATE(has_slot_number);
 #endif /* MBEDTLS_PSA_CRYPTO_SE_C */
     psa_key_type_t MBEDTLS_PRIVATE(type);
     psa_key_bits_t MBEDTLS_PRIVATE(bits);
-    psa_key_lifetime_t MBEDTLS_PRIVATE(lifetime);
     psa_key_policy_t MBEDTLS_PRIVATE(policy);
-    /* This type has a different layout in the client view wrt the
-     * service view of the key id, i.e. in service view usually is
-     * expected to have MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER defined
-     * thus adding an owner field to the standard psa_key_id_t. For
-     * implementations with client/service separation, this means the
-     * object will be marshalled through a transport channel and
-     * interpreted differently at each side of the transport. Placing
-     * it at the end of structures allows to interpret the structure
-     * at the client without reorganizing the memory layout of the
-     * struct
-     */
-    mbedtls_svc_key_id_t MBEDTLS_PRIVATE(id);
 };
 
 #if defined(MBEDTLS_PSA_CRYPTO_SE_C)
@@ -294,11 +283,12 @@ struct psa_key_attributes_s {
 #else
 #define PSA_KEY_ATTRIBUTES_MAYBE_SLOT_NUMBER
 #endif
-#define PSA_KEY_ATTRIBUTES_INIT { PSA_KEY_ATTRIBUTES_MAYBE_SLOT_NUMBER \
-                                      PSA_KEY_TYPE_NONE, 0,            \
-                                      PSA_KEY_LIFETIME_VOLATILE,       \
+#define PSA_KEY_ATTRIBUTES_INIT { MBEDTLS_SVC_KEY_ID_INIT,  \
+                                      PSA_KEY_LIFETIME_VOLATILE,    \
+                                      PSA_KEY_ATTRIBUTES_MAYBE_SLOT_NUMBER \
+                                      PSA_KEY_TYPE_NONE, 0, \
                                       PSA_KEY_POLICY_INIT,             \
-                                      MBEDTLS_SVC_KEY_ID_INIT }
+                                }
 
 static inline struct psa_key_attributes_s psa_key_attributes_init(void)
 {
